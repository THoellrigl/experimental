{"version":3,"sources":["../../backend/server.js"],"names":["app","router","express","Router","API_PORT","process","env","mongoose","connect","db","connection","on","console","error","bind","use","bodyParser","urlencoded","extended","json","get","req","res","message","Comment","find","err","comments","success","data","post","comment","body","author","text","save","put","log","params","commentId","findById","delete","remove","_id","listen"],"mappings":"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","file":"server.js","sourcesContent":["// server.js\n\n// first we import our dependenciesâ€¦\nimport express from 'express';\nimport bodyParser from 'body-parser';\nimport logger from 'morgan';\nimport mongoose from 'mongoose';\nimport { getSecret } from './secrets';\nimport Comment from './models/comment';\n\n// and create our instances\nconst app = express();\nconst router = express.Router();\n\n// set our port to either a predetermined port number if you have set it up, or 3001\nconst API_PORT = process.env.API_PORT || 3001;\n\n// db config -- set your URI from mLab in secrets.js\nmongoose.connect(getSecret('dbUri'));\nvar db = mongoose.connection;\ndb.on('error', console.error.bind(console, 'MongoDB connection error:'));\n\n// now we should configure the API to use bodyParser and look for JSON data in the request body\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(bodyParser.json());\napp.use(logger('dev'));\n\n// now we can set the route path & initialize the API\nrouter.get('/', (req, res) => {\n    res.json({ message: 'Hello, World!' });\n});\n\nrouter.get('/comments', (req, res) => {\n    Comment.find((err, comments) => {\n        if (err) return res.json({ success: false, error: err });\n        return res.json({ success: true, data: comments });\n    });\n});\n\nrouter.post('/comments', (req, res) => {\n    const comment = new Comment();\n    // body parser lets us use the req.body\n    const { author, text } = req.body;\n    if (!author || !text) {\n        // we should throw an error. we can do this check on the front end\n        return res.json({\n            success: false,\n            error: 'You must provide an author and comment'\n        });\n    }\n    comment.author = author;\n    comment.text = text;\n    comment.save(err => {\n        if (err) return res.json({ success: false, error: err });\n        return res.json({ success: true });\n    });\n});\n\nrouter.put('/comments/:commentId', (req, res) => {\n    console.log(req.params);\n    const { commentId } = req.params;\n    if (!commentId) {\n        return res.json({ success: false, error: 'No comment id provided' });\n    }\n    Comment.findById(commentId, (error, comment) => {\n        if (error) return res.json({ success: false, error });\n        const { author, text } = req.body;\n        if (author) comment.author = author;\n        if (text) comment.text = text;\n        comment.save(error => {\n            if (error) return res.json({ success: false, error });\n            return res.json({ success: true });\n        });\n    });\n});\n\nrouter.delete('/comments/:commentId', (req, res) => {\n    const { commentId } = req.params;\n    if (!commentId) {\n        return res.json({ success: false, error: 'No comment id provided' });\n    }\n    Comment.remove({ _id: commentId }, (error, comment) => {\n        if (error) return res.json({ success: false, error });\n        return res.json({ success: true });\n    });\n});\n\n// Use our router configuration when we call /api\napp.use('/api', router);\n\napp.listen(API_PORT, () => console.log(`Listening on port ${API_PORT}`));"]}